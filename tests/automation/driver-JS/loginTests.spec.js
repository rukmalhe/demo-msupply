// Generated by Selenium IDE (refactored for stability)
const { waitForElementAvailability } = require('../utils/helper.js');
//Test Data configurations helper
require('dotenv-safe').config();

const { Builder, By, Key, until } = require('selenium-webdriver');
const assert = require('assert');

describe('LoginTests', function () {
  this.timeout(40000);
  let driver;

  // Test Data sensitive informaiton
  const username = process.env.USERNAME;
  const password = process.env.PASSWORD;
  const baseUrl = process.env.BASE_URL;

  // Stable locators (no dynamic IDs)
  const USERNAME_INPUT = By.xpath("//label[normalize-space(.)='Username']/following::input[1]");
  const PASSWORD_INPUT = By.xpath("//label[normalize-space(.)='Password']/following::input[1]");
  const LOGIN_BUTTON = By.xpath("//button[@aria-label='Log in']");
  const TOAST_SNACKBAR = By.css("#notistack-snackbar"); // “Welcome to the Rukmal1 store”

  beforeEach(async function () {
    driver = await new Builder().forBrowser('firefox').build();
  });

  afterEach(async function () {
    await driver.quit();
  });

  it('LoginTests', async function () {
    await driver.get(baseUrl + "/login");
    await driver.manage().window().setRect({ width: 1024, height: 900 });

    // Wait for inputs to appear
    const userEl = await driver.wait(until.elementLocated(USERNAME_INPUT), 10000);
    const passEl = await driver.wait(until.elementLocated(PASSWORD_INPUT), 10000);

    // Fill username & password
    await userEl.clear();
    await userEl.sendKeys(username);
    await passEl.clear();
    await passEl.sendKeys(password);

    // Wait for the Log in button to be visible & enabled, then click
    const loginBtn = await driver.wait(until.elementLocated(LOGIN_BUTTON), 10000);
    await driver.wait(until.elementIsVisible(loginBtn), 5000);
    await driver.wait(until.elementIsEnabled(loginBtn), 5000);
    await loginBtn.click();

    // Verify the success toast (allow a short delay for it to appear)
    //const toast = await driver.wait(until.elementLocated(TOAST_SNACKBAR), 10000);
    const toast = await waitForElementAvailability(driver, TOAST_SNACKBAR, { timeout: 10000, isElementVisible: true, isElementEnabled: false });

    const toastText = await toast.getText();
    assert.strictEqual(toastText.trim(), "Welcome to the Rukmal1 store");


    // (Optional) Verify the user chip/name somewhere on the page if needed:
    // const userNameChip = await driver.findElement(By.xpath("(//p[@class='MuiTypography-root MuiTypography-body1 rtl-1a6kjsu'])[2]"));
    // assert.strictEqual(await userNameChip.getText(), "Rukmal");
  });
});
