
# Selenium WebDriverJS + Mocha Automation Tests

This project contains automated UI tests written in JavaScript using Selenium WebDriver and Mocha as the test framework.

---

## Prerequisites

- **Node.js** (v16 or higher recommended)  
  Download & Install from: https://nodejs.org/

- **npm** (comes with Node.js)  
  Check versions:
  node -v
  npm -v

# Core test runner
npm i -D mocha

# WebDriver bindings
npm i selenium-webdriver

-**Install helpers**
Managing sensitive test data
npm i -D dotenv dotenv-safe cross-env

- **Web Browser** (Firefox)  
  Selenium 4 will auto-manage drivers for most browsers.  
  If needed, manually install geckodriver (Firefox) or chromedriver (Chrome).

---

## Project Structure
public
tests/
└── automation/
              └── driver-JS/
                  └── loginTests.spec.js   # Example login test
              └── utils/helper.js
package.json
README.md
.env.example
---

## Installation

1. Clone the repository:
   git (https://github.com/rukmalhe/demo-msupply.git)
   cd demo-msupply

2. Install dependencies:
   npm install

3. Create your .env from the template and add credentials:
cp .env.example .env

Note: add user credentials in .env file
.gitignore (ensure .env is ignored)
---

## Running Tests

### Run all specs in automation/driver-JS
npm run test

### Run a specific test file
npm run test:login


## npm Scripts

In package.json:
"scripts": {
    "test": "mocha \"tests/**/*.spec.js\" --timeout 40000",
    "test:login": "mocha tests/automation/driver-JS/loginTests.spec.js --timeout 40000"
  }

- npm test → Runs all .spec.js files in automation/driver-JS
- npm run test:login → Runs only loginTests.spec.js

---

## Notes

- Use stable locators (e.g., by label text, aria-label) instead of dynamic IDs from Material-UI.
- Node’s built-in assertions:
  const assert = require('assert');
  assert.strictEqual(actual, expected);
- Increase --timeout in Mocha for longer Selenium waits.
- Use .env files to store sensitive credentials (with dotenv).
- For CI, set USERNAME and PASSWORD as pipeline secrets and run with:
  cross-env USERNAME=$USERNAME PASSWORD=$PASSWORD npm run test

